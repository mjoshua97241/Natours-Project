/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* BASIC RESET / NORMALIZE */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;

  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.header-primary {
  color: #fff;
  text-transform: uppercase;

  backface-visibility: hidden;
  margin-bottom: 60px;
}

.header-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  animation: moveInLeft 1s ease-out;

  /*
  animation-delay: 3s;
  animation-iteration-count: 3;

  */
}

.header-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;

  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translate(10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translate(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  display: inline-block;
  border-radius: 100px;
  transition: all 0.2s;
  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
}

.btn-white {
  background-color: #fff;
  color: #777;
  padding: 15px 40px;
}

.btn::after {
  content: ""; /*This is a must even it is empty*/
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn-animated {
  animation: moveInBottom 0.5s ease-out 0.75s;

  /* Disappear button first */
  animation-fill-mode: backwards;
}

/* 

////////////////////* LEARNING SPECIFICITY 
.button {
  font-size: 20px;
  color: white;
  background-color: blue;
}

a {
  background-color:purple;
}

#nav div.pull-right a.button {
  backgroung-color: orangered;
}

#nav div.pull-right a.button {
  background-color: green;
}

#nav a.button:hover {
  background-color: yellow;
}

///////////////////////////* HOW CSS WORKS

////////////CASCADE AND SPECIFICTY/////////////////////
- CSS declarations marked with !important have the highest priority
- But, only use !important as a last resource. It's better to use correct specificities - more maintainable code!
- Inline styles will always have priority over styles in external stylesheets;
- A selector that contains 1 ID is more specific than one with 1000 classes;
- A selector that contains 1 class is more specific than one with 1000 elements;
- The universal selector * has no specificity value (0,0,0,0);
- Rely more on specificity than on the order selectors;
- But, rely on order when using 3rd-party stylesheets - always put your author stylesheet last.

/////////////CSS VALUE PROCESSING: WHAT YOU NEED TO KNOW/////////////////
- Each property has an initial value, used if nothing is declared (and if there is no inheritance - see next lecture);
- Browsers specify a **root font-size** for each page (usually 16 px);
- Percentages and relative values are always converted to pixels;
- Percentages are measured relative to their perent's **font-size**, if used to specify font-size;
- Percentages are measure relative to their parent's **width**, if used to specify lengths;
- em are measured relative to their **parent** font-size, if used to specify font-size;
- em are measured relative to the **current** font-size, if used to specify lengths;
- rem are always measured relatvie to the **document's root** font-size;
- vh and vw are simply percentage measurements of the viewport's height and width.

//////////////INHERITANCE//////////////////////
- Inheritance passes the values for some specific properties from parents to children - more maintainable code;
- Properties related to text are inherited: font-family, font-size, color, etc
- The computed value of a property is what gets inherited, **not** the declared value.
- The inherit keyword forces inheritance on a certain property;
- The initial keyword resets a property to its initial value.

*/
